// Function to detect cycle in an undirected graph.
    
    bool bfs(int V,int index, vector<int> adj[], vector<int> &vis)
    {
        queue<pair<int,int>>q;
        q.push({index,-1});
        vis[index] = 1;
        while(!q.empty())
        {
            int sz = q.size();
            while(sz--)
            {
                pair<int,int> pp = q.front();
                int index = pp.first;
                int parent = pp.second;
                for(int i=0;i<adj[index].size();i++)
                {
                    if(adj[index][i] == parent)
                        continue;
                    if(vis[adj[index][i]] == 1)
                        return 1;
                    vis[adj[index][i]] = 1;
                    q.push({adj[index][i],index});
                    
                }
                q.pop();
            }
        }
        return 0;
    }
    
    bool isCycle(int V, vector<int> adj[]) {
        // using BFS
        vector<int> vis(V,0);
        
        for(int i=0;i<V;i++)
        {
            if(vis[i] == 0)
                if(bfs(V,i,adj,vis))
                return 1;
        }
        return 0;
    }
