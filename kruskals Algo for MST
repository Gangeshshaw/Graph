class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
	
	int parent_func(int u, vector<int> &parent)
	{
	    if(parent[u] == u)
	    return u;
	    
	    parent[u] = parent_func(parent[u],parent);
	    
	    return parent[u];
	}
	
	int kruskals(int V, vector<pair<int,pair<int,int>>>edges , vector<int>parent, vector<int>size){
	    
	    int ans =0;
	    
	    for(int i=0;i<edges.size();i++)
	    {
	        pair<int,pair<int,int>> temp = edges[i];
	        
	        int wt = temp.first;
	        int u = temp.second.first;
	        int v= temp.second.second;
	        int P_u = parent_func(u,parent);
	        int P_v = parent_func(v,parent);
	        if(P_u != P_v)
	        {
	            ans += wt;
	            int sz1 = size[P_u];
	            int sz2 = size[P_v];
	            if(sz1 >sz2)
	            {
	                size[P_u] +=size[P_v];
	                parent[P_v] = P_u;
	            }
	            else{
	                size[P_v] +=size[P_u];
	                parent[P_u] = P_v;
	            }
	        }
	    }
	    return ans;
	}
	
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // kruskal's algo
        vector<int>parent(V);
        vector<int>size(V,1);
        
        for(int i=0;i<V;i++)
        {
            parent[i] = i;
        }
        
        vector<pair<int,pair<int,int>>>edges;
        
        for(int i=0;i<V;i++)
        {
            int u = i;
            for(int j=0;j<adj[i].size();j++)
            {
                int v = adj[i][j][0];
                int wt = adj[i][j][1];
                edges.push_back({wt,{u,v}});
            }
        }
        
        sort(edges.begin(),edges.end());
        
        return kruskals(V,edges,parent,size);
    }
};
